60. write a main method in a different class to briefly experiment with some instances of the Account class.
•	Using the Account class as a base class, write two derived classes called SavingsAccount and CurrentAccount. A SavingsAccount object, in addition to the attributes of an Account object, should have an interest variable and a method which adds interest to the account. A CurrentAccount object, in addition to the attributes of an Account object, should have an overdraft limit variable. Ensure that you have overridden methods of the Account class as necessary in both derived classes.
•	Now create a Bank class, an object of which contains an array of Account objects. Accounts in the array could be instances of the Account class, the SavingsAccount class, or the CurrentAccountclass. Create some test accounts (some of each type).
•	Write an update method in the bank class. It iterates through each account, updating it in the following ways: Savings accounts get interest added (via the method you already wrote); CurrentAccounts get a letter sent if they are in overdraft.
•	The Bank class requires methods for opening and closing accounts, and for paying a dividend into each account.
Hints:
•	Note that the balance of an account may only be modified through the deposit(double) and withdraw(double) methods.
•	The Account class should not need to be modified at all.
•	Be sure to test what you have done after each step.

Output:
Savings Account Balance = 10000.0 Interest : 0.25
Current Account Balance = 20000.0 Limit : 1000.0
After updating the interest rate
Savings Account Balance = 10125.0 Interest : 1.25
After updating the withdrawn limit
Current Account Balance = 20000.0 Limit : 2000.0
Withdraw Rs. 1000 from Current Account
Current Account Balance = 19000.0 Limit : 2000.0
Withdraw Rs. 1000 from Current Account
Current Account Balance = 18000.0 Limit : 2000.0
Withdraw Rs. 3000 from Current Account
Sorry, the limit is exceeded
Current Account Balance = 18000.0 Limit : 2000.0

Code:
class Account{
 private double bal;
 private int accnum;
 
 Account(){}
 public Account(int a){
 bal=0.0;
 accnum=a;
 }
 
 public void deposit(double sum){
 if (sum>0){
 bal+=sum;
 }
 else System.err.println("Account.deposit(...): "+"cannot 
deposit negative amount.");
 
 }
 public void withdraw(double sum){
 if (sum>0) bal-=sum;
 else System.err.println("Account withdraw(...): "+"cannot 
withdraw negative amount.");
 
 }
 public double getAccountNumber()
 {
 return accnum;
 
 }
 public double getBalance(){
 return bal;
 }
 public String toString(){
 return "Acc "+accnum+": " + "balance ="+bal;
 }
 public final void print()
 {
 System.out.println(toString());
 }
}
class SavingsAccount extends Account{
 double interest=0.0;
 public SavingsAccount(double b,double i){
 super.deposit(b);
 interest=i;
 }
 public void setInterest(double n){
 interest=n;
 super.deposit(interest*100);
 System.out.println("After updating the interest rate");
 print();
 }
 public String toString(){
 return "Savings Account Balance = "+getBalance()+" Interest : 
"+interest;
 }
}
class CurrentAccount extends Account{
 double limit=0.0;
 public CurrentAccount(double b , double l){
 super.deposit(b);
 limit=l;
 }
 public void setLimit(double l){
 limit = l;
 System.out.println("After updating the withdrawn limit");
 print();
 }
 public String toString(){
 return "Current Account Balance = "+getBalance()+" Limit : 
"+limit;
 }
 public void withdraw(double num){
 System.out.println("Withdraw Rs. "+(int)num+" from Current 
Account");
 if(num<=limit){
 super.withdraw(num);
 
 print();
 }
 else System.out.println("Sorry, the limit is exceeded");
 }
}
class qn60{
 public static void main(String arg[]){
 Account a;
 a = new Account(1920102080);
 SavingsAccount b= new SavingsAccount(10000.0,0.25);
 CurrentAccount c = new CurrentAccount(20000.0,1000.0);
 b.print();
 c.print();
 b.setInterest(1.25);
 c.setLimit(2000.0);
 c.withdraw(1000);
 c.withdraw(1000);
 c.withdraw(3000);
 c.print();
 }
}

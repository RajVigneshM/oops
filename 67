67. Sometimes it's better to use dynamic size arrays. Java's Arraylist can provide you this 
feature. Try to solve this problem using Arraylist. 
You are given lines. In each line there are zero or more integers. You need to answer a few 
queries where you need to tell the number located in xth position yth of line. 
Take your input from System.in. Input Format
The first line has an integer . In each of the next lines there will be an integer denoting number 
of integers on that line and then there will be space-separated integers. In the next line there 
will be an integer denoting number of queries. Each query will consist of two integers and. 
Constraints 
• 1<=n<=20000 
• 0<=d<=50000 
• 1<=q<=1000 
• 1<=x<=n 
Each number will fit in signed integer. 
Total number of integers in lines will not cross . 
Output Format In each line, output the number located in xth position of yth line. If there is no 
such position, just print "ERROR!" 
Sample Input
5
5 41 77 74 22 44
1 12
4 37 34 36 52 
0
3 20 22 33
5
1 3
3 4
3 1
4 3
5 5
Sample Output 
77
36
4
ERROR! 
ERROR!
Code:
import java.util.*;
public class qn67 { 
 public static void main(String[] args) { 
 ArrayList<ArrayList> numList = new ArrayList<ArrayList>();
 int n=0;
 Scanner in = new Scanner(System.in);
 n=in.nextInt();
 
 for(int k =0 ; k<n ; k++){
 ArrayList<Integer> na = new ArrayList<Integer>();
 int nr = in.nextInt();
 na.add(nr);
 for(int j =0 ; j<nr ; j++){
 int elm = in.nextInt();
 na.add(elm);
 }
 numList.add(na);
 }
 n=in.nextInt();
 
 for(int k =0 ; k<n ; k++){
 
 try {
 int x=in.nextInt();
 int y=in.nextInt();
System.out.println(numList.get(x-1).get(y-1)); 
 } catch (Exception e) { 
 //TODO: handle exception
 System.out.println("ERROR!");
 }
 }
 }
}

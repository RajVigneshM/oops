62. Define an interface “StackOperations” which declares methods for a static stack. 
interface StackOperations{ 
int max=5; 
void push(int data); 
void pop(); 
int isempty(); 
int isfull(); 
} 
Define a class “MyStack” which contains an array and top as data members andimplements the 
above interface. Initialize the stack using a constructor. Write a menudriven program to perform 
operations on a stack object.
Hint: Menudriven
Code:
import java.io.*;
interface StackOperations{
 int max=5;
 void push(int data);
 void pop();
 int isempty();
 int isfull();
}
class MyStack implements StackOperations{
 public int arr[]=new int[max];
 public int pos=max;
 public int isempty(){
 if(pos==max){
 return 1;
 }
 else return 0;
 }
 public int isfull(){
 if(pos==0){
 return 1;
 }
 else return 0;
 }
 public void push(int data){
 
 pos--;
 arr[pos]=data;
 
 }
 
 public void pop(){
 
 arr[pos]=0;
 pos++;
 }
 
 public void display(){
 for(int i=pos;i<max;i++){
 System.out.println(arr[i]);
 }
 }
}
public class qn62{
 public static void main(String arg[])throws Exception{
 int ch,data;
 String c;
 BufferedReader br = new BufferedReader(new 
InputStreamReader(System.in));
 MyStack s = new MyStack();
 do{
 System.out.println("\n1:Push");
 System.out.println("\n2:Pop");
 System.out.println("\n3:Display");
 System.out.println("\n4:Exit");
 System.out.println("\nEnter your choice:");
 ch=Integer.parseInt(br.readLine());
 switch(ch){
 case 1:
 if(s.isfull()==1){
 System.out.println("Stack is full");
 }
 else{
 System.out.println("Enter the data:");
data = Integer.parseInt(br.readLine());
s.push(data);
 }break;
 case 2:
 if(s.isempty()==1){
 System.out.println("Stack is empty");
 }
else{
 
s.pop();
 }break;
 case 3:
 if(s.isempty()==1){
 System.out.println("Stack is empty");
 }
else{
 System.out.println("The Elements in the Stack 
are:");
 s.display();
 }break;
 case 4:
 System.exit(0);
break;
 default:
 System.out.println("\nInvalid choice");
 }
 }while(ch!=4);
 
 }
 }
